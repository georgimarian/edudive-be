// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

model User {
  id                       Int                        @id @default(autoincrement())
  email                    String                     @unique
  firstName                String?
  lastName                 String?
  role                     Role                       @default(STUDENT)
  StudentToSkill           StudentOnSkill[]
  TeacherToSubject         TeacherOnSubject[]
  StudentOnMasterProgramme StudentOnMasterProgramme[]
}

model MasterProgramme {
  id                         Int                          @id @default(autoincrement())
  name                       String
  StudentOnMasterProgramme   StudentOnMasterProgramme[]
  SubjecstOnMasterProgrammes SubjecstOnMasterProgrammes[]
}

model Subject {
  id               Int                          @id @default(autoincrement())
  name             String?
  descriptiveLink  String?
  masterProgrammes SubjecstOnMasterProgrammes[]
  skills           SubjectsOnSkills[]
  TeacherToSubject TeacherOnSubject[]
  assessments      Assessment[]
  calendarEvents   CalendarEvent[]

  steps Step[]
}

model SubjecstOnMasterProgrammes {
  masterProgramme   MasterProgramme @relation(fields: [masterProgrammeId], references: [id])
  masterProgrammeId Int
  subject           Subject         @relation(fields: [subjectId], references: [id])
  subjectId         Int

  @@id([masterProgrammeId, subjectId])
}

enum SkillType {
  SOFT
  HARD
}

model Skill {
  id                   Int                    @id @default(autoincrement())
  name                 String?
  type                 SkillType
  subjects             SubjectsOnSkills[]
  SkillOnStep          SkillOnStep[]
  StudentToSkill       StudentOnSkill[]
  SkillOnChecklistStep SkillOnChecklistStep[]
  color                String?
}

model PredefinedSkill {
  id   Int       @id @default(autoincrement())
  name String?
  type SkillType
}

model SubjectsOnSkills {
  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId Int
  skill     Skill   @relation(fields: [skillId], references: [id])
  skillId   Int

  @@id([subjectId, skillId])
}

model Step {
  id            Int           @id @default(autoincrement())
  description   String?
  completed     Boolean       @default(false)
  SkillOnStep   SkillOnStep[]
  nextSteps     Step[]        @relation("link")
  previousSteps Step[]        @relation("link")
  subjects      Subject[]
}

model SkillOnStep {
  skill   Skill @relation(fields: [skillId], references: [id])
  skillId Int
  step    Step  @relation(fields: [stepId], references: [id])
  stepId  Int

  @@id([stepId, skillId])
}

model ChecklistStep {
  id                   Int                    @id @default(autoincrement())
  description          String?
  SkillOnChecklistStep SkillOnChecklistStep[]
}

model SkillOnChecklistStep {
  skill           Skill         @relation(fields: [skillId], references: [id])
  skillId         Int
  checklistStep   ChecklistStep @relation(fields: [checklistStepId], references: [id])
  checklistStepId Int

  @@id([checklistStepId, skillId])
}

model Assessment {
  id                   Int      @id @default(autoincrement())
  title                String?
  finalGradePercentage Int
  Subject              Subject? @relation(fields: [subjectId], references: [id])
  subjectId            Int?
}

model CalendarEvent {
  id        Int      @id @default(autoincrement())
  title     String?
  date      DateTime
  Subject   Subject? @relation(fields: [subjectId], references: [id])
  subjectId Int?
}

model StudentOnSkill {
  student                User  @relation(fields: [studentId], references: [id])
  studentId              Int
  skill                  Skill @relation(fields: [skillId], references: [id])
  skillId                Int
  currentStepId          Int
  percentageToCompletion Int

  @@id([studentId, skillId])
}

model TeacherOnSubject {
  teacher   User    @relation(fields: [teacherId], references: [id])
  teacherId Int
  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId Int

  @@id([teacherId, subjectId])
}

model StudentOnMasterProgramme {
  student           User            @relation(fields: [studentId], references: [id])
  studentId         Int
  MasterProgramme   MasterProgramme @relation(fields: [masterProgrammeId], references: [id])
  masterProgrammeId Int
  yearOfStudy       Int             @default(1)

  @@id([studentId, masterProgrammeId])
}
